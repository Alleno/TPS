// <auto-generated />
using DataAccessNew.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DataAccessNew.Migrations
{
    [DbContext(typeof(DataContextNew))]
    [Migration("20180201215039_ZeeChanges")]
    partial class ZeeChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TPS.Core.Models.AnticipatedAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AnticipatedAudiences");
                });

            modelBuilder.Entity("TPS.Core.Models.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatuses");
                });

            modelBuilder.Entity("TPS.Core.Models.ChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ChargeType");
                });

            modelBuilder.Entity("TPS.Core.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abstract")
                        .IsRequired();

                    b.Property<int>("AnticipatedAudienceId");

                    b.Property<int>("ApprovalStatusId");

                    b.Property<DateTime?>("DateApproval");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateSignedBySponsor");

                    b.Property<DateTime?>("DateStart");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("FundingAmount");

                    b.Property<int?>("FundingCategoryId");

                    b.Property<string>("Objective")
                        .IsRequired();

                    b.Property<string>("ProjectNumber");

                    b.Property<string>("TaskNumber");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("VisibilityLevelId");

                    b.HasKey("Id");

                    b.HasIndex("AnticipatedAudienceId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("FundingCategoryId");

                    b.HasIndex("VisibilityLevelId");

                    b.ToTable("Contracts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contract");
                });

            modelBuilder.Entity("TPS.Core.Models.Deliverable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContractId");

                    b.Property<string>("CurrentStatus")
                        .IsRequired();

                    b.Property<DateTime?>("DateDelivered");

                    b.Property<DateTime>("DateEstimatedDue");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("Formal");

                    b.Property<int>("FormatId");

                    b.Property<int>("ProductTypeId");

                    b.Property<Guid?>("PublicationId");

                    b.Property<Guid?>("TaskBaseClassId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FormatId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("PublicationId")
                        .IsUnique()
                        .HasFilter("[PublicationId] IS NOT NULL");

                    b.HasIndex("TaskBaseClassId");

                    b.ToTable("Deliverables");
                });

            modelBuilder.Entity("TPS.Core.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("TPS.Core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BadgeId");

                    b.Property<string>("EmployeeId");

                    b.Property<int>("EmployeeTypeId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TPS.Core.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("TPS.Core.Models.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("TPS.Core.Models.FundingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FundingCategories");
                });

            modelBuilder.Entity("TPS.Core.Models.LaborCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("ActualHours");

                    b.Property<string>("ChargeCode");

                    b.Property<decimal>("ChargedAmount");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("EmployeeId");

                    b.Property<double>("EstimatedHours");

                    b.Property<int>("PayPeriodId");

                    b.Property<Guid?>("TaskBaseClassId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayPeriodId");

                    b.HasIndex("TaskBaseClassId");

                    b.ToTable("LaborCharges");
                });

            modelBuilder.Entity("TPS.Core.Models.NonLaborCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualDate");

                    b.Property<string>("ChargeCode");

                    b.Property<int>("ChargeTypeId");

                    b.Property<decimal>("ChargedAmount");

                    b.Property<decimal>("EstimatedAmount");

                    b.Property<DateTime>("PlannedDate");

                    b.Property<Guid?>("TaskBaseClassId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeTypeId");

                    b.HasIndex("TaskBaseClassId");

                    b.ToTable("NonLaborCharges");
                });

            modelBuilder.Entity("TPS.Core.Models.PayPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FiscalYear");

                    b.Property<DateTime>("PeriodEndDate");

                    b.Property<int>("PeriodNumber");

                    b.Property<DateTime>("PeriodStartDate");

                    b.Property<int>("SubPeriodNumber");

                    b.HasKey("Id");

                    b.ToTable("PayPeriods");
                });

            modelBuilder.Entity("TPS.Core.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("TPS.Core.Models.Publication", b =>
                {
                    b.Property<Guid>("DeliverableId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActualNumPages");

                    b.Property<int?>("EstimatedNumPages");

                    b.Property<Guid>("NonLaborChargeId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("DeliverableId");

                    b.HasIndex("NonLaborChargeId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("TPS.Core.Models.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("TPS.Core.Models.TaskBaseClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("DivisionId");

                    b.Property<int>("IDACoreArea");

                    b.Property<string>("ShortTitle");

                    b.Property<Guid>("TaskLeaderId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("TaskLeaderId");

                    b.ToTable("TasksBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TaskBaseClass");
                });

            modelBuilder.Entity("TPS.Core.Models.VisibilityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("VisibilityLevels");
                });

            modelBuilder.Entity("TPS.Core.Models.Amendment", b =>
                {
                    b.HasBaseType("TPS.Core.Models.Contract");

                    b.Property<Guid>("TaskOrderId");

                    b.HasIndex("TaskOrderId");

                    b.ToTable("Amendment");

                    b.HasDiscriminator().HasValue("Amendment");
                });

            modelBuilder.Entity("TPS.Core.Models.TaskOrder", b =>
                {
                    b.HasBaseType("TPS.Core.Models.Contract");

                    b.Property<DateTime?>("DatePlacedOnContract");

                    b.Property<int>("SponsorId");

                    b.Property<Guid?>("TaskId");

                    b.HasIndex("SponsorId");

                    b.ToTable("TaskOrder");

                    b.HasDiscriminator().HasValue("TaskOrder");
                });

            modelBuilder.Entity("TPS.Core.Models.SubTask", b =>
                {
                    b.HasBaseType("TPS.Core.Models.TaskBaseClass");

                    b.Property<decimal>("Budget");

                    b.Property<Guid>("TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTask");

                    b.HasDiscriminator().HasValue("SubTask");
                });

            modelBuilder.Entity("TPS.Core.Models.Task", b =>
                {
                    b.HasBaseType("TPS.Core.Models.TaskBaseClass");

                    b.Property<Guid?>("EmployeeId");

                    b.Property<Guid>("TaskOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskOrderId")
                        .IsUnique()
                        .HasFilter("[TaskOrderId] IS NOT NULL");

                    b.ToTable("Task");

                    b.HasDiscriminator().HasValue("Task");
                });

            modelBuilder.Entity("TPS.Core.Models.Contract", b =>
                {
                    b.HasOne("TPS.Core.Models.AnticipatedAudience", "AnticipatedAudience")
                        .WithMany()
                        .HasForeignKey("AnticipatedAudienceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.ApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.FundingCategory", "FundingCategory")
                        .WithMany()
                        .HasForeignKey("FundingCategoryId");

                    b.HasOne("TPS.Core.Models.VisibilityLevel", "VisibilityLevel")
                        .WithMany()
                        .HasForeignKey("VisibilityLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TPS.Core.Models.Deliverable", b =>
                {
                    b.HasOne("TPS.Core.Models.Contract", "Contract")
                        .WithMany("Deliverables")
                        .HasForeignKey("ContractId");

                    b.HasOne("TPS.Core.Models.Format", "Format")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.Publication", "Publication")
                        .WithOne("Deliverable")
                        .HasForeignKey("TPS.Core.Models.Deliverable", "PublicationId");

                    b.HasOne("TPS.Core.Models.TaskBaseClass", "TaskBaseClass")
                        .WithMany("Deliverables")
                        .HasForeignKey("TaskBaseClassId");
                });

            modelBuilder.Entity("TPS.Core.Models.Employee", b =>
                {
                    b.HasOne("TPS.Core.Models.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TPS.Core.Models.LaborCharge", b =>
                {
                    b.HasOne("TPS.Core.Models.Employee", "Employee")
                        .WithMany("LaborCharges")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.PayPeriod", "PayPeriod")
                        .WithMany()
                        .HasForeignKey("PayPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.TaskBaseClass")
                        .WithMany("LaborCharges")
                        .HasForeignKey("TaskBaseClassId");
                });

            modelBuilder.Entity("TPS.Core.Models.NonLaborCharge", b =>
                {
                    b.HasOne("TPS.Core.Models.ChargeType", "ChargeType")
                        .WithMany()
                        .HasForeignKey("ChargeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.TaskBaseClass")
                        .WithMany("NonLaborCharges")
                        .HasForeignKey("TaskBaseClassId");
                });

            modelBuilder.Entity("TPS.Core.Models.Publication", b =>
                {
                    b.HasOne("TPS.Core.Models.NonLaborCharge", "PubsCost")
                        .WithMany()
                        .HasForeignKey("NonLaborChargeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TPS.Core.Models.TaskBaseClass", b =>
                {
                    b.HasOne("TPS.Core.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TPS.Core.Models.Employee", "TaskLeader")
                        .WithMany()
                        .HasForeignKey("TaskLeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TPS.Core.Models.Amendment", b =>
                {
                    b.HasOne("TPS.Core.Models.TaskOrder", "TaskOrder")
                        .WithMany("Amendments")
                        .HasForeignKey("TaskOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TPS.Core.Models.TaskOrder", b =>
                {
                    b.HasOne("TPS.Core.Models.Sponsor", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TPS.Core.Models.SubTask", b =>
                {
                    b.HasOne("TPS.Core.Models.Task", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TPS.Core.Models.Task", b =>
                {
                    b.HasOne("TPS.Core.Models.Employee")
                        .WithMany("TasksLed")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TPS.Core.Models.TaskOrder", "TaskOrder")
                        .WithOne("Task")
                        .HasForeignKey("TPS.Core.Models.Task", "TaskOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
